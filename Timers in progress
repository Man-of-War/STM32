/**
 ******************************************************************************
 * @file           : Its not about the money
 ******************************************************************************

	ITS ABOUT SENDING A MESSAGE

 ******************************************************************************
 */
#define LED_RED 0x200
#define LED_GREEN 0x400
#define LED_BLUE 0x300

#include "stm32g474xx.h"

uint32_t i = 0;
uint16_t j = 0;
uint32_t a = 0;
uint16_t b = 0;
uint16_t c = 0;
uint16_t d = 0;
uint16_t e = 0;
uint16_t f = 0;
uint16_t g = 0;
uint16_t h = 0;



uint32_t ADC_interrupt_check = 0;

uint32_t okres = 0;
uint32_t pwm1 = 0;

//float j = 0.3;

//void ADC1_2_IRQHandler();




#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


void GPIO_Setup()
{
	RCC -> AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
	RCC -> AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
	RCC -> AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
	RCC -> AHB2ENR |= RCC_AHB2ENR_GPIODEN;
	RCC -> AHB2ENR |= RCC_AHB2ENR_GPIOEEN;
	RCC -> AHB2ENR |= RCC_AHB2ENR_GPIOFEN;

	// LEDs RED - B9 ; BLUE - B10 ; GREEN - B11

	GPIOB->MODER |= GPIO_MODER_MODER9_0;
	GPIOB->MODER &= ~GPIO_MODER_MODER9_1;
	GPIOB->MODER |= GPIO_MODER_MODER10_0;
	GPIOB->MODER &= ~GPIO_MODER_MODER10_1;
	GPIOB->MODER |= GPIO_MODER_MODER11_0;
	GPIOB->MODER &= ~GPIO_MODER_MODER11_1;

	GPIOA->OTYPER &= ~GPIO_OTYPER_OT9;
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT10;
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT11;

	GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED9;
	GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED10;
	GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED11;

	GPIOA->ODR = 0x00;

	/* Set pin 0
	 * GPIOA -> BSRR = 0x01;
	 * Reset pin 0
	 * GPIOA -> BSRR = 0x0100;   NOT WORKING
	 */

}

int SPI1_TXEmpty_Check()
{
	// TXE check
	int TX_FIFO_check1 = 0;
	int TX_FIFO_check2 = 0;
	TX_FIFO_check1 = SPI1 -> SR;
	TX_FIFO_check2 = TX_FIFO_check1 & SPI_SR_TXE;				// >0 -> FIFO empty
	return TX_FIFO_check2;
}

void SPI_Setup()
{
	RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;

	GPIOA -> MODER |=  GPIO_MODER_MODE5_1;
	GPIOA -> MODER &= ~GPIO_MODER_MODE5_0;
	GPIOA -> MODER |=  GPIO_MODER_MODE6_1;
	GPIOA -> MODER &= ~GPIO_MODER_MODE6_0;
	GPIOA -> MODER |=  GPIO_MODER_MODE7_1;
	GPIOA -> MODER &= ~GPIO_MODER_MODE7_0;

	GPIOA -> AFR[0] |= (GPIO_AFRL_AFSEL5_2 + GPIO_AFRL_AFSEL5_0);
	GPIOA -> AFR[0] |= (GPIO_AFRL_AFSEL6_2 + GPIO_AFRL_AFSEL6_0);
	GPIOA -> AFR[0] |= (GPIO_AFRL_AFSEL7_2 + GPIO_AFRL_AFSEL7_0);

	for(i=5000;i>0;i--);

	SPI1 -> CR1 |= (SPI_CR1_BR_2 +SPI_CR1_BR_1);  	// PCLK/128
	SPI1 -> CR1 &= ~SPI_CR1_CPOL;					// Low Idle
	SPI1 -> CR1 |= SPI_CR1_CPHA;					// Second Edge
	SPI1 -> CR1 |= SPI_CR1_SSM;
	SPI1 -> CR1 |= SPI_CR1_SSI;
	SPI1 -> CR1 |= SPI_CR1_MSTR;					// Master, not sure if necessary

	SPI1 -> CR2 |= (SPI_CR2_DS_0 + SPI_CR2_DS_1 + SPI_CR2_DS_2 + SPI_CR2_DS_3);		// 16bit data

	for(i=5000;i>0;i--);
	SPI1 -> CR1 |= SPI_CR1_SPE;						//SPI Enable

	for(i=5000;i>0;i--);							// wait
	if (SPI1_TXEmpty_Check() > 0)
	SPI1 -> DR = 0x65;								// send 0x65
	for(i=5000;i>0;i--);							// wait
}


void Clocks_setup()
{

	RCC -> AHB2ENR |= RCC_AHB2ENR_GPIOFEN;
	for(i=5000;i>0;i--);
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV2;
	uint32_t AHB_STATUS = 0;

		while(AHB_STATUS != 0x80){								//trap  AHB DIV 2
		AHB_STATUS = (RCC -> CFGR & RCC_CFGR_HPRE_DIV2);}

	RCC -> CR |= RCC_CR_HSEON;
	long unsigned int HSE_READY = 0;

		while(HSE_READY != RCC_CR_HSERDY){						//trap	HSEON
		HSE_READY = (RCC -> CR & RCC_CR_HSERDY);}

	PWR -> CR5 &= ~PWR_CR5_R1MODE;

	FLASH -> ACR |=  FLASH_ACR_LATENCY_4WS;
	FLASH -> ACR &= ~0x0B;
	FLASH->ACR |= FLASH_ACR_PRFTEN;  // prefetch enable

	uint32_t FLASH_LATENCY = 0;

		while(FLASH_LATENCY != 4){								//trap	FLASH_LATENCY
		FLASH_LATENCY = (FLASH -> ACR & 0x0F);}

	RCC -> PLLCFGR |= RCC_PLLCFGR_PLLPDIV_1;
	RCC -> PLLCFGR |= RCC_PLLCFGR_PLLREN;
	RCC -> PLLCFGR |= 0x1c00;									// x28 multiplication
	RCC -> PLLCFGR |= RCC_PLLCFGR_PLLM_0;
	RCC -> PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;
	for(i=5000;i>0;i--);

	RCC -> CR |= RCC_CR_PLLON;
	uint32_t PLL_READY = 0;

		while(PLL_READY != RCC_CR_PLLRDY){						//trap	PLLON
		PLL_READY = (RCC -> CR & RCC_CR_PLLRDY);}


	RCC -> CFGR |= RCC_CFGR_SW_PLL;
	uint32_t PLL_STATUS = 0;

		while(PLL_STATUS != 12){								//trap	PLL_STATUS
		PLL_STATUS = (RCC -> CFGR & RCC_CFGR_SWS_PLL);}


	RCC -> CFGR &= ~RCC_CFGR_HPRE_DIV2;
	RCC -> CFGR |=  RCC_CFGR_HPRE_DIV1;
	uint32_t AHB_STATUS1 = 0x80;

		while(AHB_STATUS1 == 0x80){								//trap  AHB DIV 1
		AHB_STATUS1 = (RCC -> CFGR & RCC_CFGR_HPRE_DIV1);}

}

void ADC_Setup()
{
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;			//Działa, nie ruszać!
	RCC -> APB1ENR1|= RCC_APB1ENR1_PWREN;
	RCC -> AHB2ENR |= RCC_AHB2ENR_ADC12EN;
	RCC -> AHB2ENR |= RCC_AHB2ENR_ADC345EN;
	RCC -> CCIPR |= RCC_CCIPR_ADC12SEL_1;

	for(i=5000;i>0;i--);
	GPIOA -> MODER |=  GPIO_MODER_MODE0_1;
	GPIOA -> MODER |=  GPIO_MODER_MODE0_0;
	for(i=5000;i>0;i--);
	ADC1 -> CR &= ~ADC_CR_DEEPPWD;					// Deep power down mode exit
	ADC1 -> CR |=  ADC_CR_ADVREGEN;					//Voltage regulator enable
	for(i=65000;i>0;i--);							//V Reg start up time

	ADC12_COMMON -> CCR |= ADC_CCR_CKMODE_0;		//ADC Clock Synchronous divided by 4
	ADC12_COMMON -> CCR |= ADC_CCR_CKMODE_1;		//ADC Clock Synchronous divided by 4

	ADC1 -> SMPR1 |=  ADC_SMPR1_SMP1_0;				//Channel 1 92,5 clock cycles sampling time
	ADC1 -> SMPR1 &= ~ADC_SMPR1_SMP1_1;				//Channel 1 92,5 clock cycles sampling time
	ADC1 -> SMPR1 |=  ADC_SMPR1_SMP1_2;				//Channel 1 92,5 clock cycles sampling time

	ADC1 -> SMPR1 |=  ADC_SMPR1_SMP2_0;				//Channel 2 92,5 clock cycles sampling time
	ADC1 -> SMPR1 &= ~ADC_SMPR1_SMP2_1;				//Channel 2 92,5 clock cycles sampling time
	ADC1 -> SMPR1 |=  ADC_SMPR1_SMP2_2;				//Channel 2 92,5 clock cycles sampling time

	//ADC1 -> SQR1 &= ~ADC_SQR1_L;					// 1 Conversion
	ADC1 -> SQR1 |= ADC_SQR1_L_0;					// 2 Conversions
	ADC1 -> SQR1 |=  ADC_SQR1_SQ1_0;				// First conversion - Channel 0
	ADC1 -> SQR1 |=  ADC_SQR1_SQ2_1;				// Second conversion - Channel 1

	//ADC1 -> CR &= ~ADC_CR_ADCALDIF;				//Choosing single ended conversion calibration
	//ADC1 -> CR |=  ADC_CR_ADCAL;					//Starting calibration

	//uint32_t ADCAL_STATUS = ADC_CR_ADCAL;
	//while(ADCAL_STATUS > 0x00){					//Wait for calibration end
	//ADCAL_STATUS = (ADC1 -> CR & ADC_CR_ADCAL);}

	//uint32_t ADC_CALFACT_DATA = 0x00;				//Uwaga zmienna wewnętrzna zostanie utracona
	//ADC_CALFACT_DATA = ADC1 -> CALFACT;			//ADC Calibration factors
	//ADC_CALFACT_DATA &= 0x7F;						//ADC Calibration factors for Single ended

	//ADC1 -> CFGR |= ADC_CFGR_CONT;
	ADC1 -> IER |= ADC_IER_EOCIE;					//End of Conversion Interrupt
	ADC1 -> CR |= ADC_CR_ADEN;

	uint32_t ADRDY_STATUS = 0x00;
	while(ADRDY_STATUS == 0x00){					//Wait for ADC Ready for operation state
	ADRDY_STATUS = (ADC1 -> CR & ADC_ISR_ADRDY);}

	for(i=65000;i>0;i--);

	ADC1 -> CR |= ADC_CR_ADSTART;
}

void Timer_Setup_Master(TIM_TypeDef *TIM)
{
	TIM -> CR2 |= TIM_CR2_MMS_0;
	//TIM -> SMCR |= TIM_SMCR_MSM;

}

void Timer_Setup_Slave(TIM_TypeDef *TIM)
{
	//TIM -> CR2 |= TIM_CR2_MMS_0;

	TIM -> SMCR |= TIM_SMCR_TS_0;
	TIM -> SMCR |= TIM_SMCR_SMS_1;
	TIM -> SMCR |= TIM_SMCR_SMS_2;

}

void Timer_Setup_Any(TIM_TypeDef *TIM)
{
	TIM -> ARR = okres;
	TIM -> CCR1 |= pwm1;

	TIM -> DIER |= TIM_DIER_CC1IE;
}

void Timer_Setup()
{
	okres = 42000;
	pwm1 = 21000;

	RCC -> APB1ENR1 |= (RCC_APB1ENR1_TIM2EN + RCC_APB1ENR1_TIM3EN + RCC_APB1ENR1_TIM4EN);
	Timer_Setup_Master(TIM2);
	Timer_Setup_Slave(TIM3);
	Timer_Setup_Slave(TIM4);
	Timer_Setup_Any(TIM2);
	Timer_Setup_Any(TIM3);
	Timer_Setup_Any(TIM4);
	//TIM2 -> EGR |= TIM_EGR_TG;
	//TIM2 -> SR &= ~TIM_SR_TIF;
	TIM2 -> CR1 |= TIM_CR1_CEN;
}


void UART_Setup()
{
	RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;

}



int main(void)
{
	NVIC_EnableIRQ(ADC1_2_IRQn);
	NVIC_EnableIRQ(TIM2_IRQn);
	Clocks_setup();
	Timer_Setup();
	GPIO_Setup();
	SPI_Setup();
	ADC_Setup();

	while(1)
    {

		if (SPI1_TXEmpty_Check() > 0)
		SPI1 -> DR = d;


		GPIOB -> BSRR = LED_RED;
		for(i=a;i>1;i--);
		GPIOB -> BRR = LED_RED;
		for(i=4096-a;i>1;i--);


    }
}

void ADC1_2_IRQHandler(){

	ADC_interrupt_check = 0;
	ADC_interrupt_check = (ADC1 -> ISR & ADC_ISR_EOS);
	if(ADC_interrupt_check>0)
	{
		b = ADC1 -> DR;
		ADC1 -> ISR |= ADC_ISR_EOS;
		ADC1 -> CR  |= ADC_CR_ADSTART;
	}
	else
	{
		a = ADC1 -> DR;
	}

		c=1;
}

void TIM2_IRQHandler(){

	e = 1;
	d++;
	if(d>60000)
		d=0;
	TIM2 -> SR &= ~TIM_SR_CC1IF;
	TIM3 -> SR &= ~TIM_SR_CC1IF;
	TIM4 -> SR &= ~TIM_SR_CC1IF;
}
